import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.0c952bb0.js";const h=JSON.parse('{"title":"Prisma Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"features/prisma.md","filePath":"features/prisma.md","lastUpdated":1697535758000}'),l={name:"features/prisma.md"},e=p(`<h1 id="prisma-concepts" tabindex="-1">Prisma Concepts <a class="header-anchor" href="#prisma-concepts" aria-label="Permalink to &quot;Prisma Concepts&quot;">​</a></h1><p>I&#39;ve been using <a href="https://www.prisma.io/docs/getting-started/quickstart" target="_blank" rel="noreferrer">Prisma</a> as an <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping" target="_blank" rel="noreferrer">ORM</a> and in this module I&#39;ll cover some interesting concepts I&#39;ve found.</p><h2 id="auto-generation-of-prisma-types" tabindex="-1">Auto-generation of prisma types <a class="header-anchor" href="#auto-generation-of-prisma-types" aria-label="Permalink to &quot;Auto-generation of prisma types&quot;">​</a></h2><p>To avoid duplicating types, you can generate prisma types and then reuse them between the frontend and backend.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-EiAkY" id="tab-mX1LjqD" checked="checked"><label for="tab-mX1LjqD">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prisma:types</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gateway</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prisma:types</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gateway</span></span></code></pre></div></div></div><p>Under the hood, I use the <a href="https://www.npmjs.com/package/@kalissaac/prisma-typegen" target="_blank" rel="noreferrer">@kalissaac/prisma-typegen</a> module that allows me to do this.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pqUxL" id="tab-HZo9808" checked="checked"><label for="tab-HZo9808">ts</label><input type="radio" name="group-pqUxL" id="tab-vk7hknn"><label for="tab-vk7hknn">example.prisma</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AUTO GENERATED FILE BY @kalissaac/prisma-typegen</span></span>
<span class="line"><span style="color:#6A737D;">// DO NOT EDIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AUTO GENERATED FILE BY @kalissaac/prisma-typegen</span></span>
<span class="line"><span style="color:#6A737D;">// DO NOT EDIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-prisma vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">prisma</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">@id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@database.VarChar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">model</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">@id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@database.VarChar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><h2 id="using-multiple-prisma-files" tabindex="-1">Using multiple Prisma files <a class="header-anchor" href="#using-multiple-prisma-files" aria-label="Permalink to &quot;Using multiple Prisma files&quot;">​</a></h2><p>In the project, you can group and create <code>.prisma</code> files wherever you want, in the end, this script will merge all the .prisma files into one <code>schema.prisma</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ~/gateway/prisma/concat-prisma-files.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">concatPrismaFiles</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">models</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dest</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolvePrisma</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;config&#39;</span><span style="color:#E1E4E8;">, config),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">models.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">model</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolvePrisma</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;models&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">model</span><span style="color:#9ECBFF;">}.prisma\`</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolvePrisma</span><span style="color:#E1E4E8;">(dest),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Prisma files merged.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ~/gateway/prisma/concat-prisma-files.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concatPrismaFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">config</span><span style="color:#24292E;">, </span><span style="color:#E36209;">models</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dest</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolvePrisma</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;config&#39;</span><span style="color:#24292E;">, config),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">models.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">model</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolvePrisma</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;models&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">model</span><span style="color:#032F62;">}.prisma\`</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolvePrisma</span><span style="color:#24292E;">(dest),</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Prisma files merged.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="using-prisma-init" tabindex="-1">Using Prisma Init <a class="header-anchor" href="#using-prisma-init" aria-label="Permalink to &quot;Using Prisma Init&quot;">​</a></h2><p>To initialize a prism in a project, run. This will start type generation, merge all the files into one big <code>schema.prisma</code> and of course make <code>npx prisma generate</code></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SkFii" id="tab-xb2KDFa" checked="checked"><label for="tab-xb2KDFa">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prisma:init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gateway</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prisma:init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gateway</span></span></code></pre></div></div></div>`,13),o=[e];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
