import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.0c952bb0.js";const d=JSON.parse('{"title":"Custom Libraries","description":"","frontmatter":{},"headers":[],"relativePath":"features/custom-libraries.md","filePath":"features/custom-libraries.md","lastUpdated":1697027170000}'),o={name:"features/custom-libraries.md"},l=n(`<h1 id="custom-libraries" tabindex="-1">Custom Libraries <a class="header-anchor" href="#custom-libraries" aria-label="Permalink to &quot;Custom Libraries&quot;">​</a></h1><p>This page is a reference to some libraries that were written so that they would not be repeated in every project over and over again.</p><h2 id="grnx-utils" tabindex="-1">grnx-utils <a class="header-anchor" href="#grnx-utils" aria-label="Permalink to &quot;grnx-utils&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils" target="_blank" rel="noreferrer">grnx-utils</a> - This is a small set of libraries written by me to move reusable code into separate libraries.</p><p>The project uses these part of the libraries. Below I can give examples of use.</p><h2 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/eslint" target="_blank" rel="noreferrer">@grnx-utils/eslint</a> - is a custom <code>eslint</code> configuration built on top of <a href="https://github.com/eslint-kit/eslint-kit" target="_blank" rel="noreferrer">eslint-kit</a> presets. <br> Adds eslint plugins like <a href="https://github.com/LIMPIX31/plugin-layout" target="_blank" rel="noreferrer"><code>plugin-layout</code></a> , <code>prefer-arrow</code> and more.</p><p><a href="https://github.com/eslint-kit/eslint-kit" target="_blank" rel="noreferrer">Eslint-kit</a> is a library that provides ready-made eslint presets and it belongs to Evgeny Zakharov.</p><p>In the project you can see <code>.eslintrc.js</code> file with custom configuration.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">grnx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@grnx-utils/eslint&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grnx</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  root: __dirname,</span></span>
<span class="line"><span style="color:#E1E4E8;">  tsconfig: </span><span style="color:#9ECBFF;">&#39;tsconfig.base.json&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  monorepo: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  enableImports: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ext: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;max-len&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;off&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">grnx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@grnx-utils/eslint&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grnx</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  root: __dirname,</span></span>
<span class="line"><span style="color:#24292E;">  tsconfig: </span><span style="color:#032F62;">&#39;tsconfig.base.json&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  monorepo: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  enableImports: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ext: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;max-len&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;off&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Since this is a monorepository, applications also have their own <code>.eslintrc.js</code> file, but inherit the configuration from the root file.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: [</span><span style="color:#9ECBFF;">&#39;../../.eslintrc.js&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  ignorePatterns: [</span><span style="color:#9ECBFF;">&#39;!**/*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.vitepress/cache&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extends: [</span><span style="color:#032F62;">&#39;../../.eslintrc.js&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  ignorePatterns: [</span><span style="color:#032F62;">&#39;!**/*&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.vitepress/cache&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div><h2 id="custom-types" tabindex="-1">Custom Types <a class="header-anchor" href="#custom-types" aria-label="Permalink to &quot;Custom Types&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/types" target="_blank" rel="noreferrer">@grnx-utils/types</a> - is collection of types and interfaces for your project. You don&#39;t have to download libraries like utility-types or copy your types from project to project.</p><p>The package provides the usual types like <code>Nullable&lt;T&gt;</code>, but also adds types for react and preact. Examples of use can be found <a href="https://github.com/Gearonix/code-gear/blob/master/packages/web/shared/src/types/common/grnx.ts" target="_blank" rel="noreferrer">here</a></p><h2 id="apollo" tabindex="-1">Apollo <a class="header-anchor" href="#apollo" aria-label="Permalink to &quot;Apollo&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/apollo" target="_blank" rel="noreferrer">@grnx-utils/apollo</a> - a simple wrapper over <a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noreferrer">@apollo/client</a>, which makes the syntax cleaner.</p><p>For example, instead of this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> apollo.</span><span style="color:#B392F0;">mutate</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutation: gql,</span></span>
<span class="line"><span style="color:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        _graphql: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            username,</span></span>
<span class="line"><span style="color:#E1E4E8;">            id</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.yourMethod</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> apollo.</span><span style="color:#6F42C1;">mutate</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    mutation: gql,</span></span>
<span class="line"><span style="color:#24292E;">    variables: {</span></span>
<span class="line"><span style="color:#24292E;">        _graphql: {</span></span>
<span class="line"><span style="color:#24292E;">            username,</span></span>
<span class="line"><span style="color:#24292E;">            id</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.yourMethod</span></span></code></pre></div><p>You can do this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> apollo.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Res</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Body</span><span style="color:#E1E4E8;">&gt;(gql, { username, id }, </span><span style="color:#9ECBFF;">&#39;mutate&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> apollo.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Res</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Body</span><span style="color:#24292E;">&gt;(gql, { username, id }, </span><span style="color:#032F62;">&#39;mutate&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><hr><h2 id="react-hooks" tabindex="-1">React Hooks <a class="header-anchor" href="#react-hooks" aria-label="Permalink to &quot;React Hooks&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/react-hooks" target="_blank" rel="noreferrer">@grnx-utils/react-hooks</a> - is a collection of react hooks such as <code>useDebounce</code>, <code>useLocalStorage</code>, <code>useFilteredEffect</code>, <code>useAsyncEffect</code> and many others. I also tried writing unit tests on hooks (via vitest) using <a href="https://github.com/testing-library/react-hooks-testing-library" target="_blank" rel="noreferrer">@testing-library/react-hooks</a>.</p><p>You can watch it <a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/react-hooks/src/__tests__" target="_blank" rel="noreferrer">here</a>.</p><h2 id="local-storage-wrapper" tabindex="-1">Local Storage Wrapper <a class="header-anchor" href="#local-storage-wrapper" aria-label="Permalink to &quot;Local Storage Wrapper&quot;">​</a></h2><p><a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/local-storage" target="_blank" rel="noreferrer">@grnx-utils/local-storage</a> - is a convenient API for working with localStorage.</p><h3 id="features" tabindex="-1">Features: <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features:&quot;">​</a></h3><ul><li>Automatic parsing if the value is in JSON format</li><li>Automatic JSON.stringify if you want to set non-primitive type to localStorage</li><li><code>SSR</code> support (check if <code>typeof window !== &#39;undefined&#39;</code>)</li><li>Ability to add a prefix to keys (useful if you have several applications on the same domain. For example, turns <code>AUTH_TOKEN</code> into <code>myapp__AUTH_TOKEN</code>)</li><li>Ability to disable setting new values if necessary</li><li>LocalStorage key typing (with typescript)</li></ul><p>You can see usage examples <a href="https://github.com/Gearonix/grnx-utils/tree/master/packages/local-storage" target="_blank" rel="noreferrer">here</a></p><h2 id="and-also-some-others" tabindex="-1">And also some others! <a class="header-anchor" href="#and-also-some-others" aria-label="Permalink to &quot;And also some others!&quot;">​</a></h2><p>A complete list of libraries can be found <a href="https://github.com/Gearonix/grnx-utils/tree/master" target="_blank" rel="noreferrer">here</a>.</p><p>I integrated <a href="https://verdaccio.org/docs/what-is-verdaccio" target="_blank" rel="noreferrer">Verdaccio</a>, <a href="https://github.com/Gearonix/grnx-utils/blob/master/tools/scripts/src/publish.ts" target="_blank" rel="noreferrer">auto publishing</a> via Github Actions CI and version control via <a href="https://github.com/changesets/changesets" target="_blank" rel="noreferrer">Changesets</a>.</p><p>Perhaps you will be hooked by these implementations.</p>`,33),t=[l];function p(r,c,i,y,E,h){return a(),e("div",null,t)}const g=s(o,[["render",p]]);export{d as __pageData,g as default};
