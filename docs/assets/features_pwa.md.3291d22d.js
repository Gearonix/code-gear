import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.0c952bb0.js";const u=JSON.parse('{"title":"PWA (Progressive Web Apps)","description":"","frontmatter":{},"headers":[],"relativePath":"features/pwa.md","filePath":"features/pwa.md","lastUpdated":1697320315000}'),l={name:"features/pwa.md"},e=p(`<h1 id="pwa-progressive-web-apps" tabindex="-1">PWA (Progressive Web Apps) <a class="header-anchor" href="#pwa-progressive-web-apps" aria-label="Permalink to &quot;PWA (Progressive Web Apps)&quot;">​</a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps" target="_blank" rel="noreferrer">PWA</a> is a type of web application that leverages modern web technologies to provide a user experience similar to that of a native mobile application.</p><p>In the project I use <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps" target="_blank" rel="noreferrer">PWA</a> + <a href="https://preactjs.com/" target="_blank" rel="noreferrer">Preact</a> combination to ensure caching and <em>offline</em> operation of the application <a href="https://developer.chrome.com/docs/workbox/" target="_blank" rel="noreferrer">https://developer.chrome.com/docs/workbox/</a></p><h2 id="using-pwa-workbox" tabindex="-1">Using PWA Workbox <a class="header-anchor" href="#using-pwa-workbox" aria-label="Permalink to &quot;Using PWA Workbox&quot;">​</a></h2><p>You can implement PWA in your application without using additional tools (implementation example <a href="https://github.com/UnnecessaryHub/learning-web/blob/master/frontend/common/pwa/sw.js" target="_blank" rel="noreferrer">here</a>), but it is recommended to use ready-made solutions such as <a href="https://developer.chrome.com/docs/workbox/" target="_blank" rel="noreferrer"><em>Google Workbox</em></a>.</p><p><a href="https://developer.chrome.com/docs/workbox/" target="_blank" rel="noreferrer">Workbox</a> - this is a library (more precisely, a set of libraries), the main purpose of which is “to provide best practices and get rid of boilerplate code when working with service workers.</p><h2 id="initializing-the-service-worker" tabindex="-1">Initializing the service worker <a class="header-anchor" href="#initializing-the-service-worker" aria-label="Permalink to &quot;Initializing the service worker&quot;">​</a></h2><p>First, let&#39;s initialize the Workbox.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// public/service-worker.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">precacheAndRoute</span><span style="color:#E1E4E8;">(self.__WB_MANIFEST)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.data </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.data.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;SKIP_WAITING&#39;</span><span style="color:#E1E4E8;">) self.</span><span style="color:#B392F0;">skipWaiting</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// public/service-worker.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">precacheAndRoute</span><span style="color:#24292E;">(self.__WB_MANIFEST)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">self.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.data </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.data.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;SKIP_WAITING&#39;</span><span style="color:#24292E;">) self.</span><span style="color:#6F42C1;">skipWaiting</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="caching-with-workbox" tabindex="-1">Caching with Workbox <a class="header-anchor" href="#caching-with-workbox" aria-label="Permalink to &quot;Caching with Workbox&quot;">​</a></h2><p>You can easily cache your static files and the application will work offline.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Example of Workbox Caching</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">registerRoute</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ({ </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.destination </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.destination </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.destination </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;worker&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaleWhileRevalidate</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheName: </span><span style="color:#9ECBFF;">&#39;assets&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheableResponsePlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        statuses: [</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Example of Workbox Caching</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">registerRoute</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ({ </span><span style="color:#E36209;">request</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    request.destination </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    request.destination </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    request.destination </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;worker&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaleWhileRevalidate</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    cacheName: </span><span style="color:#032F62;">&#39;assets&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheableResponsePlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        statuses: [</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="how-to-integrate-into-the-app" tabindex="-1">How to integrate into the app? <a class="header-anchor" href="#how-to-integrate-into-the-app" aria-label="Permalink to &quot;How to integrate into the app?&quot;">​</a></h2><p>You can use <code>plugins</code> depending on your builder.</p><ul><li><a href="https://www.npmjs.com/package/vite-plugin-pwa" target="_blank" rel="noreferrer">vite-plugin-pwa</a></li><li><a href="https://www.npmjs.com/package/workbox-webpack-plugin" target="_blank" rel="noreferrer">workbox-webpack-plugin</a></li></ul><p>In the project I am using <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">vite</a> as the main bundler, so I am using <code>vite-plugin-pwa</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .config/vite/plugins.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> preact           </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@preact/preset-vite&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PluginOption } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { VitePWA }      </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite-plugin-pwa&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webfontDownload  </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite-plugin-webfont-dl&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { fonts }        </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./fonts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildCustomPlugins</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginOption</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">VitePWA</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    registerType: </span><span style="color:#9ECBFF;">&#39;autoUpdate&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    injectRegister: </span><span style="color:#9ECBFF;">&#39;auto&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    strategies: </span><span style="color:#9ECBFF;">&#39;injectManifest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    srcDir: </span><span style="color:#9ECBFF;">&#39;public&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;service-worker.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    workbox: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      globPatterns: [</span><span style="color:#9ECBFF;">&#39;**/*.{js,css,html,ico,png,svg}&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      clientsClaim: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      skipWaiting: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    devOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      enabled: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    includeAssets: [</span><span style="color:#9ECBFF;">&#39;**/*&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .config/vite/plugins.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> preact           </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@preact/preset-vite&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PluginOption } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { VitePWA }      </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite-plugin-pwa&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webfontDownload  </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite-plugin-webfont-dl&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { fonts }        </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./fonts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildCustomPlugins</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PluginOption</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">VitePWA</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    registerType: </span><span style="color:#032F62;">&#39;autoUpdate&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    injectRegister: </span><span style="color:#032F62;">&#39;auto&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    strategies: </span><span style="color:#032F62;">&#39;injectManifest&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    srcDir: </span><span style="color:#032F62;">&#39;public&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;service-worker.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    workbox: {</span></span>
<span class="line"><span style="color:#24292E;">      globPatterns: [</span><span style="color:#032F62;">&#39;**/*.{js,css,html,ico,png,svg}&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      clientsClaim: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      skipWaiting: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    devOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      enabled: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    includeAssets: [</span><span style="color:#032F62;">&#39;**/*&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="what-about-push-notifications" tabindex="-1">What about Push Notifications? <a class="header-anchor" href="#what-about-push-notifications" aria-label="Permalink to &quot;What about Push Notifications?&quot;">​</a></h2><p>I&#39;ve been experimenting with push notifications for a while and have managed to implement it, but not in this project.</p><p>This can be easily implemented using the <a href="https://www.npmjs.com/package/web-push" target="_blank" rel="noreferrer">web-push</a> library.</p><h2 id="useful-links" tabindex="-1">Useful Links <a class="header-anchor" href="#useful-links" aria-label="Permalink to &quot;Useful Links&quot;">​</a></h2><ul><li><a href="https://github.com/Gearonix/code-gear/blob/master/apps/client/public/service-worker.js" target="_blank" rel="noreferrer"><em>Implementation in the project</em></a></li><li><a href="https://habr.com/ru/companies/macloud/articles/563724/" target="_blank" rel="noreferrer">What is Workbox (habr)</a></li></ul>`,22),o=[e];function t(r,c,i,E,y,h){return a(),n("div",null,o)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
