import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.0c952bb0.js";const u=JSON.parse('{"title":"Automated refactoring (ts-morph)","description":"","frontmatter":{},"headers":[],"relativePath":"other-concepts/ts-morph.md","filePath":"other-concepts/ts-morph.md","lastUpdated":1697535758000}'),p={name:"other-concepts/ts-morph.md"},o=e(`<h1 id="automated-refactoring-ts-morph" tabindex="-1">Automated refactoring (ts-morph) <a class="header-anchor" href="#automated-refactoring-ts-morph" aria-label="Permalink to &quot;Automated refactoring (ts-morph)&quot;">​</a></h1><p>In the project you can see automated refactoring tools such as <code>ts-morph</code>.</p><p><a href="https://ts-morph.com/setup/" target="_blank" rel="noreferrer">Ts-morph</a> - TypeScript Compiler API wrapper. Provides an easier way to programmatically navigate and manipulate TypeScript and JavaScript code. (using an AST tree, for example).</p><p>Currently, you can see all the scripts that I have ever used in the <code>tools/scripts</code> folder. This is a package with which you can change the project structure in any way you want.</p><h2 id="run-ts-morph-script" tabindex="-1">Run ts-morph script <a class="header-anchor" href="#run-ts-morph-script" aria-label="Permalink to &quot;Run ts-morph script&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-UFALk" id="tab-fH8gJ4T" checked="checked"><label for="tab-fH8gJ4T">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">nx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scripts:run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--script=check-uppercase-files.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6F42C1;">nx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scripts:run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--script=check-uppercase-files.ts</span></span></code></pre></div></div></div><h2 id="create-your-own-scripts" tabindex="-1">Create your own scripts <a class="header-anchor" href="#create-your-own-scripts" aria-label="Permalink to &quot;Create your own scripts&quot;">​</a></h2><p>Place your script in the <code>src/ts-morph</code> folder. <code>runProjectFiles</code> is a small abstraction that simply adds the necessary files to the project.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { runProjectFiles } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/lib/helpers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * write your logic inside of runProjectFiles function</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">runProjectFiles</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">sourceFile</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">importDeclarations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sourceFile.</span><span style="color:#B392F0;">getImportDeclarations</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">project</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  project.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { runProjectFiles } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/lib/helpers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * write your logic inside of runProjectFiles function</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">runProjectFiles</span><span style="color:#24292E;">((</span><span style="color:#E36209;">sourceFile</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">importDeclarations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceFile.</span><span style="color:#6F42C1;">getImportDeclarations</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">project</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  project.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>The source code can be found <a href="https://github.com/Gearonix/code-gear/tree/master/tools/scripts/src/ts-morph" target="_blank" rel="noreferrer">here</a>.</p>`,10),l=[o];function t(r,c,i,y,E,h){return a(),n("div",null,l)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
