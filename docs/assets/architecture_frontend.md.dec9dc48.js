import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.0c952bb0.js";const m=JSON.parse('{"title":"Frontend Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/frontend.md","filePath":"architecture/frontend.md","lastUpdated":1697242947000}'),t={name:"architecture/frontend.md"},o=n(`<h1 id="frontend-architecture" tabindex="-1">Frontend Architecture <a class="header-anchor" href="#frontend-architecture" aria-label="Permalink to &quot;Frontend Architecture&quot;">​</a></h1><p>There are several well-known types of architecture in the frontend. I experimented with some of them, such as <a href="https://bradfrost.com/blog/post/atomic-web-design/" target="_blank" rel="noreferrer">atomic-design</a> , but settled on FSD + Microfrontends.</p><h2 id="feature-sliced-design" tabindex="-1">Feature-Sliced-Design <a class="header-anchor" href="#feature-sliced-design" aria-label="Permalink to &quot;Feature-Sliced-Design&quot;">​</a></h2><p>In <a href="https://feature-sliced.design/docs/get-started/overview" target="_blank" rel="noreferrer">FSD</a>, a project consists of layers, each layer is made up of slices.</p><p>In general, you can read about it in the <a href="https://feature-sliced.design/docs/get-started/tutorial" target="_blank" rel="noreferrer">documentation</a>, I just want to tell you how I managed to connect this with microfrontends.</p><h2 id="usage-with-microfrontends" tabindex="-1">Usage with Microfrontends <a class="header-anchor" href="#usage-with-microfrontends" aria-label="Permalink to &quot;Usage with Microfrontends&quot;">​</a></h2><p>I came to the conclusion that every frontend application in the monorepository has the same structure with all <code>layers</code> (widgets, entities, features) <em>including</em> the shared module.</p><p>Due to the fact that this is a <code>monorepository</code>, we can <em>encapsulate</em> the logic of <code>shared</code> layers in libraries (for example, <code>packages/shared</code> or <code>ui-kit</code> with storybook) and reuse the same components from the layer on top (applications).</p><h2 id="apps-can-have-their-own-shared-layer" tabindex="-1">Apps can have their own <code>shared</code> layer <a class="header-anchor" href="#apps-can-have-their-own-shared-layer" aria-label="Permalink to &quot;Apps can have their own \`shared\` layer&quot;">​</a></h2><p>Despite this, applications can have their own local shared layers, where reusable logic is collected, relevant <em>only</em> for this application.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">~/apps/client</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">├─ app</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ entities</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ features</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ widgets</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ pages</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ shared - can also be in the application</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">~/apps/client</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">├─ app</span></span>
<span class="line"><span style="color:#24292e;">├─ entities</span></span>
<span class="line"><span style="color:#24292e;">├─ features</span></span>
<span class="line"><span style="color:#24292e;">├─ widgets</span></span>
<span class="line"><span style="color:#24292e;">├─ pages</span></span>
<span class="line"><span style="color:#24292e;">├─ shared - can also be in the application</span></span></code></pre></div><h2 id="nx-80-20-rule" tabindex="-1">Nx 80/20 rule <a class="header-anchor" href="#nx-80-20-rule" aria-label="Permalink to &quot;Nx 80/20 rule&quot;">​</a></h2><p>In development, I followed the <code>80/20</code> methodology, which promotes the idea that <em>80% of the logic</em> should be stored in libraries.</p><ul><li>place 80% of your logic into the <code>libs/</code> folder</li><li>and 20% into <code>apps/</code></li></ul><p>You can read more about it in the Nx <a href="https://nx.dev/concepts/more-concepts/applications-and-libraries" target="_blank" rel="noreferrer">documentation</a>.</p>`,15),r=[o];function l(i,c,p,d,h,u){return a(),s("div",null,r)}const g=e(t,[["render",l]]);export{m as __pageData,g as default};
